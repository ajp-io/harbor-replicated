#!/bin/bash
# Generate dynamic image overlay for Helm charts
# This script reads a chart's values.yaml and generates an overlay that redirects
# all image references to use our proxy registry.

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Registry mappings function
get_proxy_registry() {
    local registry="$1"
    case "$registry" in
        "quay.io")
            echo "images.alexparker.info/proxy/harbor-enterprise/quay"
            ;;
        "docker.io")
            echo "images.alexparker.info/proxy/harbor-enterprise/docker"
            ;;
        "registry.k8s.io"|"k8s.gcr.io")
            echo "images.alexparker.info/proxy/harbor-enterprise/k8s"
            ;;
        "gcr.io")
            echo "images.alexparker.info/proxy/harbor-enterprise/gcr"
            ;;
        "ghcr.io")
            echo "images.alexparker.info/proxy/harbor-enterprise/ghcr"
            ;;
        *)
            echo "$DEFAULT_PROXY"
            ;;
    esac
}

# Default proxy registry for images without explicit registry
DEFAULT_PROXY="images.alexparker.info/proxy/harbor-enterprise/docker"

usage() {
    echo "Usage: $0 <chart-name>"
    echo "Generate dynamic image overlay for the specified chart"
    exit 1
}

log() {
    echo "[generate-overlay] $1" >&2
}

# Transform image repository to use proxy registry
transform_image_repo() {
    local original_repo="$1"

    # If already using proxy registry, return as-is
    if [[ "$original_repo" == images.alexparker.info/* ]]; then
        echo "$original_repo"
        return
    fi

    # Extract registry and image path
    local registry=""
    local image_path="$original_repo"

    # Check if repo contains a registry
    if [[ "$original_repo" == */* ]]; then
        # Split on first slash
        registry="${original_repo%%/*}"
        image_path="${original_repo#*/}"

        # Handle Docker Hub shorthand (no registry prefix)
        if [[ ! "$registry" == *.* ]] && [[ ! "$registry" == *:* ]]; then
            # This is actually part of the image name, not a registry
            registry=""
            image_path="$original_repo"
        fi
    fi

    # Map registry to proxy
    local proxy_registry
    if [[ -n "$registry" ]]; then
        proxy_registry=$(get_proxy_registry "$registry")
    else
        proxy_registry="$DEFAULT_PROXY"
    fi

    echo "$proxy_registry/$image_path"
}

# Generate overlay YAML for image transformations
generate_image_overlay() {
    local chart_name="$1"
    local values_file="$PROJECT_ROOT/charts/$chart_name/values.yaml"

    if [[ ! -f "$values_file" ]]; then
        log "Error: values.yaml not found for chart $chart_name"
        exit 1
    fi

    log "Analyzing $chart_name chart for image references"

    # Use yq to find all image repository references
    local image_refs
    image_refs=$(yq eval '.. | select(has("repository")) | path | join(".")' "$values_file" 2>/dev/null || true)

    if [[ -z "$image_refs" ]]; then
        log "No image repository references found in $chart_name"
        echo "# No image transformations needed"
        return
    fi

    echo "# Dynamic image overlay for $chart_name chart"
    echo "# Generated by generate-overlay.sh"
    echo ""

    # Process each image reference
    while read -r path; do
        [[ -z "$path" ]] && continue

        local original_repo
        original_repo=$(yq eval ".$path.repository" "$values_file" 2>/dev/null || echo "")

        if [[ -n "$original_repo" && "$original_repo" != "null" ]]; then
            local transformed_repo
            transformed_repo=$(transform_image_repo "$original_repo")

            if [[ "$original_repo" != "$transformed_repo" ]]; then
                log "Transform: $original_repo -> $transformed_repo"

                # Convert dot notation to YAML structure
                local yaml_path="$path"
                local indentation=""
                local output_lines=()

                # Split path by dots and build nested structure
                IFS='.' read -ra PATH_PARTS <<< "$yaml_path"
                for i in "${!PATH_PARTS[@]}"; do
                    if [[ $i -eq $((${#PATH_PARTS[@]} - 1)) ]]; then
                        # Last part - add the repository value
                        output_lines+=("${indentation}${PATH_PARTS[$i]}:")
                        output_lines+=("${indentation}  repository: $transformed_repo")
                    else
                        # Intermediate part
                        output_lines+=("${indentation}${PATH_PARTS[$i]}:")
                        indentation="  $indentation"
                    fi
                done

                # Output the YAML structure
                printf '%s\n' "${output_lines[@]}"
            fi
        fi
    done <<< "$image_refs"

    # Handle global registry overrides for charts that support it
    case "$chart_name" in
        "ingress-nginx")
            echo ""
            echo "# Global registry override for ingress-nginx"
            echo "global:"
            echo "  image:"
            echo "    registry: images.alexparker.info/proxy/harbor-enterprise/k8s"
            ;;
    esac
}

main() {
    if [[ $# -ne 1 ]]; then
        usage
    fi

    local chart_name="$1"

    if [[ ! -d "$PROJECT_ROOT/charts/$chart_name" ]]; then
        log "Error: Chart directory not found: charts/$chart_name"
        exit 1
    fi

    generate_image_overlay "$chart_name"
}

main "$@"